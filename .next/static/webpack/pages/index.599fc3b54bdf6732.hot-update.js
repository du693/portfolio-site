"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./components/buttons/CopyButton.tsx":
/*!*******************************************!*\
  !*** ./components/buttons/CopyButton.tsx ***!
  \*******************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CopyButton\": function() { return /* binding */ CopyButton; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n\nconst CopyButton = (param)=>{\n    let { children , onClick  } = param;\n    const handleCopy = (event)=>{\n        if (typeof children === \"string\") {\n            navigator.clipboard.writeText(children).then(()=>{\n                alert(\"Copied to clipboard!\");\n            }).catch((err)=>{\n                console.error(\"Failed to copy text: \", err);\n            });\n        } else {\n            console.warn(\"CopyButton children must be a string to copy.\");\n        }\n        // Call the custom onClick handler if provided\n        if (onClick) {\n            onClick(event);\n        }\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        onClick: handleCopy,\n        children: children\n    }, void 0, false, {\n        fileName: \"/Users/jackcarleo/Desktop/2025 projects/portfolioB/portfolio-site/components/buttons/CopyButton.tsx\",\n        lineNumber: 29,\n        columnNumber: 9\n    }, undefined);\n};\n_c = CopyButton;\nvar _c;\n$RefreshReg$(_c, \"CopyButton\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL2J1dHRvbnMvQ29weUJ1dHRvbi50c3guanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQU9PLE1BQU1BLGFBQWEsU0FBa0M7UUFBakMsRUFBRUMsU0FBUSxFQUFFQyxRQUFPLEVBQVM7SUFDdEQsTUFBTUMsYUFBYSxDQUFDQyxRQUErQztRQUNsRSxJQUFJLE9BQU9ILGFBQWEsVUFBVTtZQUNqQ0ksVUFBVUMsU0FBUyxDQUNqQkMsU0FBUyxDQUFDTixVQUNWTyxJQUFJLENBQUMsSUFBTTtnQkFDWEMsTUFBTTtZQUNQLEdBQ0NDLEtBQUssQ0FBQyxDQUFDQyxNQUFRO2dCQUNmQyxRQUFRQyxLQUFLLENBQUMseUJBQXlCRjtZQUN4QztRQUNGLE9BQU87WUFDTkMsUUFBUUUsSUFBSSxDQUFDO1FBQ2QsQ0FBQztRQUVELDhDQUE4QztRQUM5QyxJQUFJWixTQUFTO1lBQ1pBLFFBQVFFO1FBQ1QsQ0FBQztJQUNGO0lBRUEscUJBQU8sOERBQUNXO1FBQUliLFNBQVNDO2tCQUFhRjs7Ozs7O0FBQ25DLEVBQUU7S0F0QldEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL2NvbXBvbmVudHMvYnV0dG9ucy9Db3B5QnV0dG9uLnRzeD83NjVmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1vdXNlRXZlbnRIYW5kbGVyIH0gZnJvbSBcInJlYWN0XCI7XG5cbmludGVyZmFjZSBQcm9wcyB7XG5cdGNoaWxkcmVuOiBzdHJpbmcgfCBKU1guRWxlbWVudDtcblx0b25DbGljaz86IE1vdXNlRXZlbnRIYW5kbGVyPEhUTUxCdXR0b25FbGVtZW50Pjtcbn1cblxuZXhwb3J0IGNvbnN0IENvcHlCdXR0b24gPSAoeyBjaGlsZHJlbiwgb25DbGljayB9OiBQcm9wcykgPT4ge1xuXHRjb25zdCBoYW5kbGVDb3B5ID0gKGV2ZW50OiBSZWFjdC5Nb3VzZUV2ZW50PEhUTUxCdXR0b25FbGVtZW50PikgPT4ge1xuXHRcdGlmICh0eXBlb2YgY2hpbGRyZW4gPT09IFwic3RyaW5nXCIpIHtcblx0XHRcdG5hdmlnYXRvci5jbGlwYm9hcmRcblx0XHRcdFx0LndyaXRlVGV4dChjaGlsZHJlbilcblx0XHRcdFx0LnRoZW4oKCkgPT4ge1xuXHRcdFx0XHRcdGFsZXJ0KFwiQ29waWVkIHRvIGNsaXBib2FyZCFcIik7XG5cdFx0XHRcdH0pXG5cdFx0XHRcdC5jYXRjaCgoZXJyKSA9PiB7XG5cdFx0XHRcdFx0Y29uc29sZS5lcnJvcihcIkZhaWxlZCB0byBjb3B5IHRleHQ6IFwiLCBlcnIpO1xuXHRcdFx0XHR9KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29uc29sZS53YXJuKFwiQ29weUJ1dHRvbiBjaGlsZHJlbiBtdXN0IGJlIGEgc3RyaW5nIHRvIGNvcHkuXCIpO1xuXHRcdH1cblxuXHRcdC8vIENhbGwgdGhlIGN1c3RvbSBvbkNsaWNrIGhhbmRsZXIgaWYgcHJvdmlkZWRcblx0XHRpZiAob25DbGljaykge1xuXHRcdFx0b25DbGljayhldmVudCk7XG5cdFx0fVxuXHR9O1xuXG5cdHJldHVybiA8ZGl2IG9uQ2xpY2s9e2hhbmRsZUNvcHl9PntjaGlsZHJlbn08L2Rpdj47XG59O1xuIl0sIm5hbWVzIjpbIkNvcHlCdXR0b24iLCJjaGlsZHJlbiIsIm9uQ2xpY2siLCJoYW5kbGVDb3B5IiwiZXZlbnQiLCJuYXZpZ2F0b3IiLCJjbGlwYm9hcmQiLCJ3cml0ZVRleHQiLCJ0aGVuIiwiYWxlcnQiLCJjYXRjaCIsImVyciIsImNvbnNvbGUiLCJlcnJvciIsIndhcm4iLCJkaXYiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./components/buttons/CopyButton.tsx\n"));

/***/ })

});